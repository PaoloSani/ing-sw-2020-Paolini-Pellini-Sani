package it.polimi.ingsw.GUI;

import it.polimi.ingsw.model.God;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

/**
 * It is the window where the challenger can choose the gods he wants to play with.
 * These gods will be sent to other players for being chosen
 */

public class ChallengerWindow extends GameWindow implements Initializable {

    /**
     * It let the button nextButton to be visible or not
     */
    public boolean isVisible = true;

    /**
     * It is the button to scroll backwards the gods
     */
    @FXML
    public Button backGodButton;

    /**
     * It is the button to scroll forward the gods
     */
    @FXML
    public Button nextGodButton;

    /**
     * It shows god's name.
     * It changes when the current god on screen changes.
     */
    @FXML
    public Label godLabel;

    /**
     * It shows a short description of god's power.
     */
    @FXML
    public Label powerLabel;

    /**
     * It shows the message "PLAY!" on screen.
     */
    @FXML
    public Label playLabel;

    /**
     * It is the button to press to choose a god.
     */
    @FXML
    public Button chooseButton;

    /**
     * This button gets visible if and only if the number of chosen gods is equal to the number of players.
     * It let the player to change the window.
     */
    @FXML
    public Button nextButton;

    /**
     * It is the image where the current god is shown. It changes by pressing nextGodButton and backGodButton.
     */
    @FXML
    public ImageView godCard;

    /**
     * It is the image of chooseButton.
     */
    @FXML
    public ImageView chooseButtonImage;

    /**
     * It is the image of nextButton.
     */
    @FXML
    public ImageView playImage;

    /**
     * It is the image of backGodButton.
     */
    @FXML
    public ImageView backButtonImage;

    /**
     * It is the image of nextGodButton.
     */
    @FXML
    public ImageView nextButtonImage;

    /**
     * It shows the name of the first chosen god.
     */
    @FXML
    public Label firstGodLabel;

    /**
     * It shows the name of the second chosen god.
     */
    @FXML
    public Label secondGodLabel;

    /**
     * It shows the name of the third chosen god, if present.
     */
    @FXML
    public Label thirdGodLabel;

    /**
     * It is the pane of this window.
     */
    @FXML
    public AnchorPane challengerPane;

    /**
     * It is the stage which succeeds the current one.
     */
    private final Stage nextStage = new Stage();

    /**
     * It is the god shown on mirror.
     * It is setted to God.APOLLO as default.
     */
    private God currGod = God.APOLLO;

    /**
     * It changes the current god, rolling currGod back and loading a new image on godCard.
     * @param actionEvent generated by clicking on backGodButton.
     */
    public void backGod(ActionEvent actionEvent) {
        switch (currGod){
            case APOLLO:{
                currGod = God.ZEUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0014_god_and_hero_cards_0042_zeus.png"));
                break;
            }
            case ARTEMIS:{
                currGod = God.APOLLO;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0043_god_and_hero_cards_0013_apollo.png"));
                break;
            }
            //
            case ATHENA:{
                currGod = God.ARTEMIS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0054_god_and_hero_cards_0002_Artemis.png"));
                break;
            }
            case ATLAS:{
                currGod = God.ATHENA;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0052_god_and_hero_cards_0004_Athena.png"));
                break;
            }
            //
            case CHARON:{
                currGod = God.ATLAS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0053_god_and_hero_cards_0003_Atlas.png"));
                break;
            }
            //
            case DEMETER:{
                currGod = God.CHARON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0020_god_and_hero_cards_0036_charon.png"));
                break;
            }
            case HEPHAESTUS:{
                currGod = God.DEMETER;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0050_god_and_hero_cards_0006_Demeter.png"));
                break;
            }
            //
            case HYPNUS:{
                currGod = God.HEPHAESTUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0009_god_and_hero_cards_0047_Hephaestus.png"));
                break;
            }
            case MINOTAUR:{
                currGod = God.HYPNUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0019_god_and_hero_cards_0037_Hypnus.png"));
                break;
            }
            case MORTAL:{
                currGod = God.MINOTAUR;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0008_god_and_hero_cards_0048_Minotaur.png"));
                break;
            }
            case PAN:{
                currGod = God.MORTAL;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0000_god_and_hero_cards_0057_HumanGord.png"));
                break;
            }
            case POSEIDON:{
                currGod = God.PAN;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0046_god_and_hero_cards_0010_Pan.png"));
                break;
            }
            case PROMETHEUS:{
                currGod = God.POSEIDON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0045_god_and_hero_cards_0011_Poseidon.png"));
                break;
            }
            case TRITON:{
                currGod = God.PROMETHEUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0004_god_and_hero_cards_0052_Prometheus.png"));
                break;
            }
            case ZEUS:{
                currGod = God.TRITON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0028_god_and_hero_cards_0028_triton.png"));
                break;
            }
        }
        godLabel.setText(currGod.toString());
        powerLabel.setText(currGod.getPower());
    }

    /**
     * It changes the current god, rolling currGod on and loading a new image on godCard.
     * @param actionEvent generated by clicking on nextGodButton.
     */
    public void nextGod(ActionEvent actionEvent) {
        switch (currGod) {
            case APOLLO: {
                currGod = God.ARTEMIS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0054_god_and_hero_cards_0002_Artemis.png"));
                break;
            }
            case ARTEMIS: {
                currGod = God.ATHENA;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0052_god_and_hero_cards_0004_Athena.png"));
                break;
            }
            //
            case ATHENA: {
                currGod = God.ATLAS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0053_god_and_hero_cards_0003_Atlas.png"));
                break;
            }
            case ATLAS: {
                currGod = God.CHARON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0020_god_and_hero_cards_0036_charon.png"));
                break;
            }
            //
            case CHARON: {
                currGod = God.DEMETER;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0050_god_and_hero_cards_0006_Demeter.png"));
                break;
            }
            //
            case DEMETER: {
                currGod = God.HEPHAESTUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0009_god_and_hero_cards_0047_Hephaestus.png"));
                break;
            }
            case HEPHAESTUS: {
                currGod = God.HYPNUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0019_god_and_hero_cards_0037_Hypnus.png"));
                break;
            }
            //
            case HYPNUS: {
                currGod = God.MINOTAUR;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0008_god_and_hero_cards_0048_Minotaur.png"));
                break;
            }

            case MINOTAUR: {
                currGod = God.MORTAL;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0000_god_and_hero_cards_0057_HumanGord.png"));
                break;
            }
            case MORTAL: {
                currGod = God.PAN;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0046_god_and_hero_cards_0010_Pan.png"));
                break;
            }
            case PAN: {
                currGod = God.POSEIDON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0045_god_and_hero_cards_0011_Poseidon.png"));
                break;
            }
            case POSEIDON: {
                currGod = God.PROMETHEUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0004_god_and_hero_cards_0052_Prometheus.png"));
                break;
            }
            case PROMETHEUS: {
                currGod = God.TRITON;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0028_god_and_hero_cards_0028_triton.png"));
                break;
            }
            case TRITON: {
                currGod = God.ZEUS;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0014_god_and_hero_cards_0042_zeus.png"));
                break;
            }
            case ZEUS: {
                currGod = God.APOLLO;
                godCard.setImage(new Image("FullGodAvatar/full_0000s_0043_god_and_hero_cards_0013_apollo.png"));
                break;
            }
        }
        godLabel.setText(currGod.toString());
        powerLabel.setText(currGod.getPower());
    }

    /**
     * It adds the chosen god to a list of already chosen gods.
     * If the number of gods is equal to the number of players, it lets playImage, playLabel and nextButton be visible.
     * @param actionEvent generated by clicking on chooseButton.
     */
    public void chooseGod(ActionEvent actionEvent) {
        guiHandler.addGod(currGod,firstGodLabel,secondGodLabel,thirdGodLabel);
        List<God> gods = guiHandler.getGods();
        isVisible = (guiHandler.getNumOfPlayers() == guiHandler.getGods().size());
        if (isVisible){
            playImage.setVisible(true);
            playLabel.setVisible(true);
            nextButton.setVisible(true);
        }
    }

    /**
     * It changes the current scene and the current stage, closing the latter.
     * @param actionEvent generated by clicking on nextButton.
     */
    public void goFurther(ActionEvent actionEvent) {
        guiHandler.sendChallengerMessage();
        guiHandler.loadFXMLFile(nextButton,nextStage,"/GUIScenes/beginningMatchWindow.fxml");
    }

    /**
     * It shows a graphical effect when pressing backGodButton.
     * @param mouseEvent generated by pressing backGodButton.
     */
    public void clickBack(MouseEvent mouseEvent) {
        backButtonImage.setImage(new Image("Buttons/btn_back_pressed.png"));
    }

    /**
     * It shows a graphical effect when releasing backGodButton.
     * @param mouseEvent generated by releasing backGodButton.
     */
    public void releaseBack(MouseEvent mouseEvent) {
        backButtonImage.setImage(new Image("Buttons/btn_back.png"));
    }

    /**
     * It shows a graphical effect when pressing nextGodButton.
     * @param mouseEvent generated by pressing nextGodButton.
     */
    public void clickNext(MouseEvent mouseEvent) {
        nextButtonImage.setImage(new Image("Buttons/btn_back_pressed.png"));
    }

    /**
     * It shows a graphical effect when releasing nextGodButton.
     * @param mouseEvent generated by releasing nextGodButton.
     */
    public void releaseNext(MouseEvent mouseEvent) {
        nextButtonImage.setImage(new Image("Buttons/btn_back.png"));
    }

    /**
     * It shows a graphical effect when pressing chooseButton.
     * @param mouseEvent generated by pressing chooseButton.
     */
    public void clickChoose(MouseEvent mouseEvent) {
        chooseButtonImage.setImage(new Image("Buttons/cm_btn_blue_pressed.png"));
    }

    /**
     * It shows a graphical effect when pressing chooseButton.
     * @param mouseEvent generated by pressing nextButton.
     */
    public void clickPlay(MouseEvent mouseEvent) {
        playImage.setImage(new Image("Buttons/cm_btn_blue_pressed.png"));
    }

    /**
     * It shows a graphical effect when releasing chooseButton.
     * @param mouseEvent generated by releasing chooseButton.
     */
    public void releaseChoose(MouseEvent mouseEvent) {
        chooseButtonImage.setImage(new Image("Buttons/cm_btn_blue.png"));
    }

    /**
     * It shows a graphical effect when releasing chooseButton.
     * @param mouseEvent generated by releasing nextButton.
     */
    public void releasePlay(MouseEvent mouseEvent) {
        playImage.setImage(new Image("Buttons/cm_btn_blue.png"));
    }


    public void initialize(URL location, ResourceBundle resources) {
        guiHandler.setCurrPane(challengerPane);
    }
}
